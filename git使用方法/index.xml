<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git使用方法s on</title><link>https://lostbirdx.github.io/leetcode/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link><description>Recent content in Git使用方法s on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://lostbirdx.github.io/leetcode/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://lostbirdx.github.io/leetcode/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/Git-%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%951-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lostbirdx.github.io/leetcode/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/Git-%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%951-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</guid><description>分支 分支的概念 分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。
如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！ ![[Pasted image 20210809162103.png]]
分支的基本操作. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # 创建分支 git branch name //创建名为name的分支 #切换分支 git checkout name //这个是什么意思? 切换名字到为name的分支 # 上面两行可以改成一行 git checkout -b name #切换分支还可以用 git switch -c dev // 创建名为dev的分支,并切换到该分支 git switch dev //切换到已有的dev分支. # 修改完了代码，需要push到远程分支上，可以下面操作 git push --set-upstream origin 分支名 # 查看分支 git branch # 本地分支 git branch -r # 远程分支 git brance -a # 查看所有分支 #合并分支 git merge dev //比如说当前所在分支为main,然后我使用这个命令,就会将dev和main合并到一起.</description></item><item><title/><link>https://lostbirdx.github.io/leetcode/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/githubpage%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lostbirdx.github.io/leetcode/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/githubpage%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</guid><description> github page的一个教程 如何发布logseq笔记到github page 我最终的目的是能够让我的笔记更方便的得到使用,可是实际上,用一个U盘拷过去,已经足够的方便了,使用网络服务器总会有缺陷 ,所以没有必要折腾了,太浪费时间..
nonono 你需要会用这些工具,即使不用在这个功能上面
1 2 3 4 5 title:index.html collapse: open index.html是github page的首页</description></item><item><title/><link>https://lostbirdx.github.io/leetcode/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lostbirdx.github.io/leetcode/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE/</guid><description>1 2 3 不会用Git的开发人员,绝对没有真正的写过代码 GIT 是一个版本控制软件.
从github 上面新建一个仓库的时候,只需要按照提示来一步一步进行就可以了.
如果下次你在远程仓库修改了文件,那么在push之前你就需要先pull.
ssh连接和https连接. ssh 连接和https连接的区别. 使用https连接,每次都要输入用户名和密码,而且那个用户名和密码好像有点BUG,都得输入两次才能对.很离谱
第一次使用Git时候,需要配置好自己的用户名和邮箱,这是在每一次提交的时候都要使用的信息.
1 2 3 4 5 6 # github或者gitlab用到的用户名和邮箱 $ git config --global user.name &amp;#34;John Doe&amp;#34; $ git config --global user.email &amp;#34;johndoe@example.com&amp;#34; # 查看基本配置 git config --list 如何配置ssh连接github 账户 1 2 3 4 # 生成秘钥 ssh-keygen -t rsa -C &amp;#34;johndoe@example.com&amp;#34; # ~/.ssh目录下面会有id_rsa和id_rsa.pub两个文件 cat id_rsa.pub # 把这个里面的内容复制 复制上面的内容之后，打开你的github，进入配置页：Settings – SSH and GPG keys，添加本地生成的ssh秘钥，选择New SSH key（这里已经配置了一个key，如果是未配置秘钥的用户，这里是空的），把复制的内容贴过来，然后保存：</description></item><item><title/><link>https://lostbirdx.github.io/leetcode/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/Git%E7%9A%84%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lostbirdx.github.io/leetcode/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/Git%E7%9A%84%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/</guid><description>Git的常规操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 克隆项目下来 git clone git@github.com:zhongqiangwu960812/AI-RecommenderSystem.git # 如果新改了某个文件，需要同步到远程 # 如果是新增了某个文件，可以直接 git add 文件名 git status # 可以查看修改情况 git commit -m &amp;#39;新加文件&amp;#39; # 提交说明 git push # 提交 # 这样，就搞定了 # 如果是删除了某个或者修改了很多地方等，可以 git add . git commit -m &amp;#39;update many&amp;#39; git push # 如果是从远程仓库改了文件，需要先拉到本地，让本地和远程保持一致之后再push git pull</description></item><item><title/><link>https://lostbirdx.github.io/leetcode/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/Git%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%952-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lostbirdx.github.io/leetcode/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/Git%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%952-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid><description>1 2 3 4 5 6 7 8 9 10 ```## 操作远程库的基本流程 假设什么也没有,那就从第1步开始最后. 假设已经有了本地库,那就从第二步开始.(不过好像还是得新建一个.因为不能 和别的乱七八糟的库关联啊...) ### 1. 先在Github新建一个仓库 ### 2. clone 下来之后,创建两者之间的关联. ```shell git remote add origin git@github.com:username/responame.git //这里要使用ssh地址,而不是https地址了.因为你使用了ssh连接. 如果发现关联错误,需要解除远程关联 [[#^52c9a6|解除远程关联的方法]]
3. push到远程仓库 在本地的分支进行了提交之后,就可以push到远程仓库了.
1 2 git push -u origin main //第一次push git push origin main //后面的push 附:解除和远程库的关联 ^52c9a6
如果添加的时候地址写错了，或者就是想删除远程库，可以用git remote rm 命令。使用前，建议先用git remote -v查看远程库信息：
1 2 3 $ git remote -v origin git@github.</description></item><item><title/><link>https://lostbirdx.github.io/leetcode/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/obsidiangit%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8./</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lostbirdx.github.io/leetcode/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/obsidiangit%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8./</guid><description>用处 obsidian 的Git插件,可以让用户使用Github来对自己的笔记库进行备份.
理解 obsidian 的git插件,实际上只是对系统的GIT做了一些调用而已.真正起作用的是系统的GIT软件.
因而,在使用obsidian-git插件之前,你需要先对vault做一些设置.比如把它初始化成git 仓库,添加远程仓库等等..
然后就可以使用obsidian的命令,来对其进行pull push等一系列的git操作了.</description></item><item><title/><link>https://lostbirdx.github.io/leetcode/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/%E9%97%AE%E9%A2%98%E8%B5%84%E6%96%99%E9%9B%B6%E7%A2%8E%E7%9A%84%E4%B8%9C%E8%A5%BF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lostbirdx.github.io/leetcode/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/%E9%97%AE%E9%A2%98%E8%B5%84%E6%96%99%E9%9B%B6%E7%A2%8E%E7%9A%84%E4%B8%9C%E8%A5%BF/</guid><description>廖雪峰的Git教程 这个教程非常的详细,非常容易理解.. github 的origin是什么意思?? #问题
origin 就是指那个远程库,那个库下面有很多个分支. origin/main origin/dev
1 2 git branch -M main //重命名分支 当时我们在看那个logseq publish的时候,就用到了这个命令.
git 默认把clone下来的仓库命名为origin 第一个分支命名为master 这里是把master重命名为了main.</description></item></channel></rss>